#
# sets sysctls and sysfs tunables
# (expects that we've already run the package roles)
#

# TODO see comments in var defaults, this is not the right way to do this...
# and to add to that, we might want to set a lot of other things besides thp.
# maybe this should just be a role and use variables depending on host and
# group membership, but let's see how many use cases actually appear besides
# this one (most of this is /proc anyways... really this should be too, it
# fits better in like a /proc/sys/mm/, but alas, it's not)
#
- name: configure_sysfs_tunables
  when: >
    not is_container
    and (
      groups[systune_sysfs_exclude_group] is not defined
      or ansible_host not in groups[systune_sysfs_exclude_group]
    )
  block:

    - name: set_transparent_hugepage_madvise
      copy:
        content: |
          # {{ansible_managed}}
          kernel/mm/transparent_hugepage/enabled = madvise
          kernel/mm/transparent_hugepage/defrag = defer+madvise
          kernel/mm/transparent_hugepage/khugepaged/pages_to_scan = 65536
          kernel/mm/transparent_hugepage/khugepaged/max_ptes_swap = 511
          kernel/mm/transparent_hugepage/khugepaged/max_ptes_shared = 511
          kernel/mm/transparent_hugepage/khugepaged/scan_sleep_millisecs = 3000
          kernel/mm/transparent_hugepage/khugepaged/alloc_sleep_millisecs = 10000
        dest: /etc/sysfs.d/thp.conf
      register: r

    - name: load_sysfs_tunables
      service:
        name: sysfsutils
        state: restarted
      when: (systune_now | bool) and r.changed

- name: determine_sysctl_group_mapping
  set_fact:
    systune_group: "{{
      query('fileglob', 'files/sysctl?*.conf') |
      map('regex_replace', '^.*files/sysctl(.*)\\.conf$', '\\1') |
      select('in', group_names)
    }}"

- name: sanity_check_sysctl_mapping_uniqueness
  fail:
    msg: sysctl group mapping must be unique
  when: (systune_group | length) > 1

- name: construct_sysctl_filename
  set_fact:
    systune_sysctl_filename: files/sysctl{{systune_group | join('')}}.conf

- name: copy_designated_sysctl_file
  copy:
    src: '{{systune_sysctl_filename}}'
    dest: /etc/sysctl.conf
  register: r_designated

- name: configure_bridge_iptables_kmod
  when: systune_brouter | bool
  block:

    - name: persist_bridge_iptables_kmod
      when: not is_container
      copy:
        content: |
          # {{ansible_managed}}
          br_netfilter
        dest: /etc/modules-load.d/brtables.conf

    - name: load_bridge_iptables_kmod
      when: not is_container
      command: modprobe -v br_netfilter
      register: r
      changed_when: r.rc == 0 and (r.stdout_lines | length) > 0

    - name: configure_iptables_on_bridges
      copy:
        content: |
          # {{ansible_managed}}
          net.bridge.bridge-nf-call-iptables = 1
        dest: /etc/sysctl.d/98-brtables.conf
      register: r_brtables

- name: configure_routing_on_routers
  copy:
    content: |
      # {{ansible_managed}}
      net.ipv4.ip_forward = 1
    dest: /etc/sysctl.d/98-ip-forwarding.conf
  when: systune_router | bool
  register: r_routers

- name: maybe_set_sysctls
  systemd:
    name: systemd-sysctl.service
    state: restarted
  when: >
    (systune_now | bool) and (
      r_designated.changed or
      r_routers.changed or
      r_brtables.changed
    )
