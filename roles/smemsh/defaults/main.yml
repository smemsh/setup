#
---

# github username that contains skeleton repos needed to flesh homedir
skel_github: smemsh

# github api limited to only 60 anonymous requests per hour per ip,
# whereas authentication bumps it to 5000.  situation is exacerbated by
# api paging limitations, we can only fetch max 100 tags per request.
# https://docs.github.com/en/rest/using-the-rest-api/rate-limits-for-the-rest-api
#
skel_apitok: !vault |
  $ANSIBLE_VAULT;1.1;AES256
  3862393539363464316337623763666533313638313938313837666266373032613037
  64636138313761616461663834356365666532323137643636663336360a3230356332
  3366633238343161386138363035376565303564616534383239333035313039303636
  6339366233373831653061396635633831323137623032390a34333230636235356162
  6433663632323539666338303735643335333135393838333632343433383530333331
  3835613365653830316362653165376238353933626337306361633137326565643063
  3439623764306138316533663939366666373464383261323037373862643166323661
  6364363233303236363130633163353339316463636131393634313937303638336630
  3139326439333664306562323762356165643137396234646632613837656138666635
  63316636646662

# todo: don't use '~', not sure if this always expands to the right user
# (there's local, remote, become user, not sure it works in all cases)
#
skel_srcx_dir: '~/srcx'
skel_rcfiles_dir: '~'

# run sysadmin role: create sysadmin group in sudoers and use as our primary
skel_sysadmin: true

# run mkuser role with this username (this role always run, but is idempotent)
skel_user: '{{sysadmin_username}}'

# run initpgp role: initialize gpg config and trust our own key.
# (only done on skel_init, set false to skip and also not verify checkouts)
#
initpgp_keyid: '{{sysadmin_username}}@{{sysadmin_domain}}'

# run initssh role: initialize authorized_keys to allow our key to connect
# (only done on skel_init, set false to skip)
#
initssh_keyid: '{{sysadmin_username}}@{{sysadmin_host}}.{{sysadmin_domain}}'

# skel_repos_* key is repo name to checkout.  value is tag to checkout.
# if empty, enumerates tags on github and determines latest by "loose"
# version sort (alg from 'version_sort' filter).  if value contains any
# digits, taken as an exact tag, otherwise a prefix, where only tags
# starting therewith will be considered.  exes copied into ~/bin/
# whereas rcfiles are symlinked from home dir into the repo as dotfiles
# (ala installx/installrc)
#
skel_repos_exes:
  utilsh:
  utilpy:
  utiladm:
  installx:
  git-reltag:
#
skel_repos_rcfiles:
  .vim:
  .bash:
  .tmux:
  .terminfo:
  .gitcli:

# default prefix used to limit matches for sort when key empty/none
skel_tagprefix: master

# override individual keys from these defaults by supplying in an *_addl
# key-val.  the whole lot can be replaced by redefining skel_repos_*
#
skel_exes_addl: {}
skel_rcfiles_addl: {}

# for excluding specific keys without having to redefine everything
skel_repos_excludes: []

# final dicts after addl merging and exclusions
skel_repos_rcall: '{{skel_repos_rcfiles | combine(skel_rcfiles_addl)
                     | ansible.utils.remove_keys(skel_repos_excludes)}}'
skel_repos_exall: '{{skel_repos_exes | combine(skel_exes_addl)
                     | ansible.utils.remove_keys(skel_repos_excludes)}}'
skel_repos_all: '{{skel_repos_rcall | combine(skel_repos_exall)
                   | ansible.utils.remove_keys(skel_repos_excludes)}}'

# for specifying either in inventory or cli the repositories which
# should get submodule init+update (default false).  note that the
# corresponding option is 'recursive' in ansible git module, but really
# only determines whether submodules are dealt with via update+init, and
# in fact the '--recursive' option is always added to "git submodule"
# command line, but that command is not run unless 'recursive' module
# option enabled (it will be if repo present in this list)
#
skel_repos_submods: []
