#!/usr/bin/env bash
#
# ansrole
#   executes a role against hosts or inventory groups, passing varval args
#
# usage:
#   ansrole [-n | --nofacts] [--ansible-playbook-opt] [...] \
#           <apply-onto-pattern(s)> <role-to-apply> \
#           [ <varname=value> | <json> ] [...]
#           # adjust in usagex() also ## fixme
# desc:
#   - executes role in "./roles/<role-to-apply>/" onto <apply-onto-pattern>
#   - passes trailing var=val params as '-e' args to ansible-playbook
#   - uses rc-configured inventory; pass '--inventory=' to override
#   - creates symlinks to play/role dirs in a `mktemp -d` directory
#   - runs in the tmpdir after creating temporary playbook with static role
#   - (ansible can only do playbook-relative, not cwd-relative paths)
#
# todo:
#   - once 22983 is implemented, tmpdir won't be needed anymore
#   - also see 21890 because include_role won't expose vars until then
#   - and 19305 will allow roles to be incl dynamically with include_role:
#   - and 22985 with roles: itself instead of needing a task
#   - after adjusting usage in comment header, usagex() also needs update
#   - do not use this pdsh_all_skip exclusion if --inventory supplied
#   - use our own option for the host_list case that won't need 'all'
#
# scott@smemsh.net
# https://github.com/smemsh/setup/
# https://spdx.org/licenses/GPL-2.0
#
##############################################################################

anscfg=.ansible.cfg
allnodes="all:!pdsh_all_skip" # hostpattern actually used when 'all' requested

tmpdir=`mktemp -d /tmp/ansrole-XXXXXXXX` || exit 121
#trap "rm -rf ${tmpdir:?}" EXIT

init_cfbase ()
{
	local cfbase

	if test -f $anscfg
	then cfbase="$PWD"
	else echo "cwd must be a playbase" >&2; false; exit; fi

	# disabled for now, we only run as setup user these days
	#export ANSIBLE_CONFIG="$cfbase/.ansible.cfg"
	#export ANSIBLE_INVENTORY="$cfbase/.ansible.hosts"
	#export ANSIBLE_CONFIG="$cfbase/.ansible.cfg"
	#export ANSIBLE_INVENTORY=/dev/null
	#
	#cd $cfbase
}

# note: adjust this in comment header too
# todo: maybe reformat directly from $BASH_SOURCE
#
usagex ()
{
	cat <<- %
	ansrole [-n | --nofacts] [--ansible-playbook-opt] [...] \\
	    <apply-onto-pattern(s)>:<role-to-apply> \\
	    [ <varname=value> | <json> ] [...]
	%
	false
	exit
}

# - ansrole [options] <apply-onto-patterns> <role> [var=val] ...
# - multiple patterns allowed: <pattern>[:<pattern>][...]
# - used as a "--limit=<onto>" with playbook target always 'all'
# - special case: 'all' itself gets --limit set to $allnodes var
# - to use a host_list instead, use '--inventory=host1,host2,'
#
process_args ()
{
	local match nmatches onto role inv

	# skip fact gathering for raw roles, must be first arg
	if [[ $1 == '--nofacts' || $1 == '-n' ]]; then
		dofacts='false'; shift; fi

	# leading -o or --options we'll pass to ansible intact
	while [[ $1 == -* ]]
	do opts+=("$1"); shift; done

	onto="$1"; role=$2; shift 2
	[[ "$onto" == all ]] && onto="$allnodes"
	[[ $onto && $role ]] && rolename=$role || usagex
	limits=(--limit="$onto")

	# rest are var=val or json strings for ansible-playbook -e
	shift; for arg; do extras+=(-e); extras+=("$arg"); done
}

generate_tmp_playbook ()
{
	cat <<- % >$tmpplay
	- hosts: all
	  # some roles require lockstep tasks or disaster will
	  # ensue, like mysql master update phase.  change it
	  # only very carefully.  TODO: script args to control
	  strategy: linear
	  serial: 100%
	  become: true
	  gather_facts: ${dofacts:-'true'}
	  vars_files: [$(
	    ls vars/*.yml \
	    | awk -F / '{printf("\"%s\", ", $NF)}'
	  )]
	  roles: ['$rolename']
	%
}

# workaround ansible requiring everything to be relative to
# the play base, by making a temporary one of our own,
# populated by symlinks to the real one.  this is truly a
# hack, to work around ansible not having a cwd or
# specific-dir -relative mode
#
init_tmp_playbase ()
{
	local d; for d in */; do
		d=${d%/}; ln -s $(readlink -f $d) $tmpdir/; done

	tmpplay=$tmpdir/ansrole-${rolename:?}.yml

	# todo: might have to copy *.yml files from the
	# playbase too at some point if we ever become more
	# than just a role executor
}

main ()
{
	init_cfbase &&
	process_args "$@" &&
	init_tmp_playbase &&
	generate_tmp_playbook &&
	ansible-playbook \
		"${opts[@]}" \
		"${limits[@]}" \
		$tmpplay \
		"${extras[@]}" \
	;
}

main "$@"
