#!/usr/bin/env python3
"""
tfhosts
  terraform external data source derived from nsswitch-enumerated "hosts" db

desc
  - parses "getent hosts" output
  - outputs toplevel {"$key":"$value",...} json dict
  - host record field 1 (as key) maps to its field 2 (as value)
  - host record fields from 2 (as key) to the end map to field 1 (as value)
"""
__url__     = 'https://github.com/smemsh/setup/'
__author__  = 'Scott Mcdermott <scott@smemsh.net>'
__license__ = 'GPL-2.0'

from sys import exit, hexversion
if hexversion < 0x030900f0: exit("minpython: %s" % hexversion)

from sys import argv, stdout, stderr
from json import dump as jsondump
from traceback import print_exc
from subprocess import check_output

from os.path import basename
from os import (
    getenv, unsetenv,
    EX_OK as EXIT_SUCCESS,
    EX_SOFTWARE as EXIT_FAILURE,
)

###

def err(*args, **kwargs):
    print(*args, file=stderr, **kwargs)

def bomb(*args, **kwargs):
    err(*args, **kwargs)
    exit(EXIT_FAILURE)

def exe(cmd):
    return check_output(cmd.split(), text=True).splitlines()

###

def tfhosts():

    outputs = {}
    for host in exe("getent hosts"):
        fields = host.split(maxsplit=2)
        addr = fields[0]
        name = fields[1]
        outputs[addr] = name
        outputs[name] = addr
        if len(fields) > 2: # leftovers are aliases
            for alias in fields[2].split():
                outputs[alias] = addr

    jsondump(outputs, stdout)

###

def main():

    if debug == 1:
        breakpoint()

    try: subprogram = globals()[invname]
    except (KeyError, TypeError):
        from inspect import trace
        if len(trace()) == 1: bomb("unimplemented")
        else: raise

    return subprogram()

###

if __name__ == "__main__":

    invname = basename(argv[0])
    args = argv[1:]

    from bdb import BdbQuit
    if debug := int(getenv('DEBUG') or 0):
        import pdb
        from pprint import pp
        err('debug: enabled')
        unsetenv('DEBUG') # otherwise forked children hang

    try: main()
    except BdbQuit: bomb("debug: stop")
    except SystemExit: raise
    except KeyboardInterrupt: bomb("interrupted")
    except:
        print_exc(file=stderr)
        if debug: pdb.post_mortem()
    finally: # cpython bug 55589
        try: stdout.flush()
        finally:
            try: stdout.close()
            finally:
                try: stderr.flush()
                finally: stderr.close()


